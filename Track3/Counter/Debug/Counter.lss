
Counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000334  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000db0  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab7  00000000  00000000  000011c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000553  00000000  00000000  00001c77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  000021cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f5  00000000  00000000  000022cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000030c  00000000  00000000  000027c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002acd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	cd c0       	rjmp	.+410    	; 0x1c4 <__vector_10>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	af d0       	rcall	.+350    	; 0x208 <main>
  aa:	08 c1       	rjmp	.+528    	; 0x2bc <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <lcd_command>:
}

void lcd_command ( unsigned char dat, bool isChar)
{
	char type;
	if(isChar)
  ae:	67 2b       	or	r22, r23
  b0:	11 f4       	brne	.+4      	; 0xb6 <lcd_command+0x8>
	type = 0x0C; //set input for char
	else
	type = 0x08; //set input for a command
  b2:	28 e0       	ldi	r18, 0x08	; 8
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <lcd_command+0xa>

void lcd_command ( unsigned char dat, bool isChar)
{
	char type;
	if(isChar)
	type = 0x0C; //set input for char
  b6:	2c e0       	ldi	r18, 0x0C	; 12
	else
	type = 0x08; //set input for a command
	
	PORTC = dat & 0xF0;
  b8:	98 2f       	mov	r25, r24
  ba:	90 7f       	andi	r25, 0xF0	; 240
  bc:	95 bb       	out	0x15, r25	; 21
	PORTC = PORTC | type;
  be:	95 b3       	in	r25, 0x15	; 21
  c0:	92 2b       	or	r25, r18
  c2:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	ef ec       	ldi	r30, 0xCF	; 207
  c6:	f7 e0       	ldi	r31, 0x07	; 7
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <lcd_command+0x1a>
  cc:	00 c0       	rjmp	.+0      	; 0xce <lcd_command+0x20>
  ce:	00 00       	nop
	_delay_ms(1);
	PORTC = 0x04;
  d0:	94 e0       	ldi	r25, 0x04	; 4
  d2:	95 bb       	out	0x15, r25	; 21
	
	PORTC = (dat & 0x0F) << 4;
  d4:	f0 e1       	ldi	r31, 0x10	; 16
  d6:	8f 9f       	mul	r24, r31
  d8:	c0 01       	movw	r24, r0
  da:	11 24       	eor	r1, r1
  dc:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC | type;
  de:	85 b3       	in	r24, 0x15	; 21
  e0:	82 2b       	or	r24, r18
  e2:	85 bb       	out	0x15, r24	; 21
  e4:	8f ec       	ldi	r24, 0xCF	; 207
  e6:	97 e0       	ldi	r25, 0x07	; 7
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <lcd_command+0x3a>
  ec:	00 c0       	rjmp	.+0      	; 0xee <lcd_command+0x40>
  ee:	00 00       	nop
	_delay_ms(1);
	PORTC = 0x00;
  f0:	15 ba       	out	0x15, r1	; 21
  f2:	08 95       	ret

000000f4 <lcd_clear>:
	lcd_command(0x06, false); // Entrymode set: Direction to right, blinking display OFF
	lcd_command(0x80, false); // Set DDRAM naar 0 (begin)
}

void lcd_clear(){
	lcd_command(0x01, false); //clear display
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	70 e0       	ldi	r23, 0x00	; 0
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	d9 df       	rcall	.-78     	; 0xae <lcd_command>
	lcd_command(0x08, false); // Display ON, de rest OFF
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	70 e0       	ldi	r23, 0x00	; 0
 100:	88 e0       	ldi	r24, 0x08	; 8
 102:	d5 cf       	rjmp	.-86     	; 0xae <lcd_command>
 104:	08 95       	ret

00000106 <lcd_init>:
 */ 

#include "lcd.h"

void lcd_init(){
	DDRC = 0xFF;
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 10a:	15 ba       	out	0x15, r1	; 21
	
	lcd_clear();
 10c:	f3 df       	rcall	.-26     	; 0xf4 <lcd_clear>
	
	lcd_command(0x02, false); //return home: cursor to or position
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	82 e0       	ldi	r24, 0x02	; 2
 114:	cc df       	rcall	.-104    	; 0xae <lcd_command>
	lcd_command(0x28, false); //function set: data length naar 8 bit, 2 lines en 5x11 font size
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	70 e0       	ldi	r23, 0x00	; 0
 11a:	88 e2       	ldi	r24, 0x28	; 40
 11c:	c8 df       	rcall	.-112    	; 0xae <lcd_command>
	lcd_command(0x0e, false); // display ON , cursor ON, cursor blink OFF
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	8e e0       	ldi	r24, 0x0E	; 14
 124:	c4 df       	rcall	.-120    	; 0xae <lcd_command>
	lcd_command(0x06, false); // Entrymode set: Direction to right, blinking display OFF
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	86 e0       	ldi	r24, 0x06	; 6
 12c:	c0 df       	rcall	.-128    	; 0xae <lcd_command>
	lcd_command(0x80, false); // Set DDRAM naar 0 (begin)
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	80 e8       	ldi	r24, 0x80	; 128
 134:	bc cf       	rjmp	.-136    	; 0xae <lcd_command>
 136:	08 95       	ret

00000138 <lcd_display_text>:
 138:	ef 92       	push	r14
	PORTC = PORTC | type;
	_delay_ms(1);
	PORTC = 0x00;
}

void lcd_display_text(char *str){
 13a:	ff 92       	push	r15
 13c:	0f 93       	push	r16
 13e:	1f 93       	push	r17
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	8c 01       	movw	r16, r24
 146:	7c 01       	movw	r14, r24
	for (int i=0; i < strlen(str); i++)
 148:	c0 e0       	ldi	r28, 0x00	; 0
 14a:	d0 e0       	ldi	r29, 0x00	; 0
 14c:	07 c0       	rjmp	.+14     	; 0x15c <lcd_display_text+0x24>
	lcd_command( str[i], true );
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	f7 01       	movw	r30, r14
 154:	81 91       	ld	r24, Z+
 156:	7f 01       	movw	r14, r30
 158:	aa df       	rcall	.-172    	; 0xae <lcd_command>
	_delay_ms(1);
	PORTC = 0x00;
}

void lcd_display_text(char *str){
	for (int i=0; i < strlen(str); i++)
 15a:	21 96       	adiw	r28, 0x01	; 1
 15c:	f8 01       	movw	r30, r16
 15e:	01 90       	ld	r0, Z+
 160:	00 20       	and	r0, r0
 162:	e9 f7       	brne	.-6      	; 0x15e <lcd_display_text+0x26>
 164:	31 97       	sbiw	r30, 0x01	; 1
 166:	e0 1b       	sub	r30, r16
 168:	f1 0b       	sbc	r31, r17
 16a:	ce 17       	cp	r28, r30
 16c:	df 07       	cpc	r29, r31
 16e:	78 f3       	brcs	.-34     	; 0x14e <lcd_display_text+0x16>
	lcd_command( str[i], true );
}
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	ff 90       	pop	r15
 17a:	ef 90       	pop	r14
 17c:	08 95       	ret

0000017e <lcd_set_cursor>:

void lcd_set_cursor(int position, int line){
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	8c 01       	movw	r16, r24
	if(line == 2)
 188:	62 30       	cpi	r22, 0x02	; 2
 18a:	71 05       	cpc	r23, r1
 18c:	29 f4       	brne	.+10     	; 0x198 <lcd_set_cursor+0x1a>
	lcd_command(0xC0, false);
 18e:	60 e0       	ldi	r22, 0x00	; 0
 190:	70 e0       	ldi	r23, 0x00	; 0
 192:	80 ec       	ldi	r24, 0xC0	; 192
 194:	8c df       	rcall	.-232    	; 0xae <lcd_command>
 196:	04 c0       	rjmp	.+8      	; 0x1a0 <lcd_set_cursor+0x22>
	else
	lcd_command(0x80, false);
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	80 e8       	ldi	r24, 0x80	; 128
 19e:	87 df       	rcall	.-242    	; 0xae <lcd_command>
	
	for(int i=0; i < position; i++)
 1a0:	10 16       	cp	r1, r16
 1a2:	11 06       	cpc	r1, r17
 1a4:	54 f4       	brge	.+20     	; 0x1ba <lcd_set_cursor+0x3c>
 1a6:	c0 e0       	ldi	r28, 0x00	; 0
 1a8:	d0 e0       	ldi	r29, 0x00	; 0
	lcd_command(0x14, false);
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	84 e1       	ldi	r24, 0x14	; 20
 1b0:	7e df       	rcall	.-260    	; 0xae <lcd_command>
	if(line == 2)
	lcd_command(0xC0, false);
	else
	lcd_command(0x80, false);
	
	for(int i=0; i < position; i++)
 1b2:	21 96       	adiw	r28, 0x01	; 1
 1b4:	0c 17       	cp	r16, r28
 1b6:	1d 07       	cpc	r17, r29
 1b8:	c1 f7       	brne	.-16     	; 0x1aa <lcd_set_cursor+0x2c>
	lcd_command(0x14, false);
	
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	1f 91       	pop	r17
 1c0:	0f 91       	pop	r16
 1c2:	08 95       	ret

000001c4 <__vector_10>:
#include "lcd.h"

int count = 0;

ISR( TIMER2_OVF_vect  )
{
 1c4:	1f 92       	push	r1
 1c6:	0f 92       	push	r0
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	0f 92       	push	r0
 1cc:	11 24       	eor	r1, r1
 1ce:	8f 93       	push	r24
 1d0:	9f 93       	push	r25
	count++;
 1d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1da:	01 96       	adiw	r24, 0x01	; 1
 1dc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 1e4:	9f 91       	pop	r25
 1e6:	8f 91       	pop	r24
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <timer2_init>:

void timer2_init()
{
	OCR2 = REACH_VALUE; //klok tot hoelang die moet tikken
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	83 bd       	out	0x23, r24	; 35
	TIMSK |= 0x08; 
 1f6:	87 b7       	in	r24, 0x37	; 55
 1f8:	88 60       	ori	r24, 0x08	; 8
 1fa:	87 bf       	out	0x37, r24	; 55
	SREG  |= 0x08;		//interrupt enable
 1fc:	8f b7       	in	r24, 0x3f	; 63
 1fe:	88 60       	ori	r24, 0x08	; 8
 200:	8f bf       	out	0x3f, r24	; 63
	TCCR2 = 0x1F;
 202:	8f e1       	ldi	r24, 0x1F	; 31
 204:	85 bd       	out	0x25, r24	; 37
 206:	08 95       	ret

00000208 <main>:
}


int main(void)
{
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	cd b7       	in	r28, 0x3d	; 61
 20e:	de b7       	in	r29, 0x3e	; 62
 210:	64 97       	sbiw	r28, 0x14	; 20
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	f8 94       	cli
 216:	de bf       	out	0x3e, r29	; 62
 218:	0f be       	out	0x3f, r0	; 63
 21a:	cd bf       	out	0x3d, r28	; 61
   char buffer[20];
   DDRD = 0x00;
 21c:	11 ba       	out	0x11, r1	; 17
   
   DDRA = 0xFF;
 21e:	8f ef       	ldi	r24, 0xFF	; 255
 220:	8a bb       	out	0x1a, r24	; 26
   
   lcd_init();
 222:	71 df       	rcall	.-286    	; 0x106 <lcd_init>
   timer2_init();
 224:	e6 df       	rcall	.-52     	; 0x1f2 <timer2_init>
 226:	84 b5       	in	r24, 0x24	; 36
   
   while (1)
   {
	   PORTA = TCNT2;
 228:	8b bb       	out	0x1b, r24	; 27
 22a:	61 e0       	ldi	r22, 0x01	; 1
	   
	   lcd_set_cursor(7,1);
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	87 e0       	ldi	r24, 0x07	; 7
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	a5 df       	rcall	.-182    	; 0x17e <lcd_set_cursor>
 234:	4a e0       	ldi	r20, 0x0A	; 10
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 236:	be 01       	movw	r22, r28
 238:	6f 5f       	subi	r22, 0xFF	; 255
 23a:	7f 4f       	sbci	r23, 0xFF	; 255
 23c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 240:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 244:	08 d0       	rcall	.+16     	; 0x256 <__itoa_ncheck>
	   lcd_display_text(itoa(count, buffer, 10));
 246:	78 df       	rcall	.-272    	; 0x138 <lcd_display_text>
 248:	8f e1       	ldi	r24, 0x1F	; 31
 24a:	9e e4       	ldi	r25, 0x4E	; 78
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <main+0x44>
 250:	00 c0       	rjmp	.+0      	; 0x252 <main+0x4a>
 252:	00 00       	nop
 254:	e8 cf       	rjmp	.-48     	; 0x226 <main+0x1e>

00000256 <__itoa_ncheck>:
 256:	bb 27       	eor	r27, r27
 258:	4a 30       	cpi	r20, 0x0A	; 10
 25a:	31 f4       	brne	.+12     	; 0x268 <__itoa_ncheck+0x12>
 25c:	99 23       	and	r25, r25
 25e:	22 f4       	brpl	.+8      	; 0x268 <__itoa_ncheck+0x12>
 260:	bd e2       	ldi	r27, 0x2D	; 45
 262:	90 95       	com	r25
 264:	81 95       	neg	r24
 266:	9f 4f       	sbci	r25, 0xFF	; 255
 268:	01 c0       	rjmp	.+2      	; 0x26c <__utoa_common>

0000026a <__utoa_ncheck>:
 26a:	bb 27       	eor	r27, r27

0000026c <__utoa_common>:
 26c:	fb 01       	movw	r30, r22
 26e:	55 27       	eor	r21, r21
 270:	aa 27       	eor	r26, r26
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	aa 1f       	adc	r26, r26
 278:	a4 17       	cp	r26, r20
 27a:	10 f0       	brcs	.+4      	; 0x280 <__utoa_common+0x14>
 27c:	a4 1b       	sub	r26, r20
 27e:	83 95       	inc	r24
 280:	50 51       	subi	r21, 0x10	; 16
 282:	b9 f7       	brne	.-18     	; 0x272 <__utoa_common+0x6>
 284:	a0 5d       	subi	r26, 0xD0	; 208
 286:	aa 33       	cpi	r26, 0x3A	; 58
 288:	08 f0       	brcs	.+2      	; 0x28c <__utoa_common+0x20>
 28a:	a9 5d       	subi	r26, 0xD9	; 217
 28c:	a1 93       	st	Z+, r26
 28e:	00 97       	sbiw	r24, 0x00	; 0
 290:	79 f7       	brne	.-34     	; 0x270 <__utoa_common+0x4>
 292:	b1 11       	cpse	r27, r1
 294:	b1 93       	st	Z+, r27
 296:	11 92       	st	Z+, r1
 298:	cb 01       	movw	r24, r22
 29a:	00 c0       	rjmp	.+0      	; 0x29c <strrev>

0000029c <strrev>:
 29c:	dc 01       	movw	r26, r24
 29e:	fc 01       	movw	r30, r24
 2a0:	67 2f       	mov	r22, r23
 2a2:	71 91       	ld	r23, Z+
 2a4:	77 23       	and	r23, r23
 2a6:	e1 f7       	brne	.-8      	; 0x2a0 <strrev+0x4>
 2a8:	32 97       	sbiw	r30, 0x02	; 2
 2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <strrev+0x18>
 2ac:	7c 91       	ld	r23, X
 2ae:	6d 93       	st	X+, r22
 2b0:	70 83       	st	Z, r23
 2b2:	62 91       	ld	r22, -Z
 2b4:	ae 17       	cp	r26, r30
 2b6:	bf 07       	cpc	r27, r31
 2b8:	c8 f3       	brcs	.-14     	; 0x2ac <strrev+0x10>
 2ba:	08 95       	ret

000002bc <_exit>:
 2bc:	f8 94       	cli

000002be <__stop_program>:
 2be:	ff cf       	rjmp	.-2      	; 0x2be <__stop_program>
