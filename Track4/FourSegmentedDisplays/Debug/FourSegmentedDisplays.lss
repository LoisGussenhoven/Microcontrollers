
FourSegmentedDisplays.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ec1  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008dd  00000000  00000000  000012a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000054d  00000000  00000000  00001b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000010c  00000000  00000000  000020cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000501  00000000  00000000  000021d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002bd  00000000  00000000  000026d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002996  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	98 d0       	rcall	.+304    	; 0x1ca <main>
  9a:	03 c1       	rjmp	.+518    	; 0x2a2 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <wait>:
void displayOff()
{
	spi_slaveSelect(0); // Select display chip
	spi_write(0x0C); // Register 0B: Shutdown register
	spi_write(0x00); // -> 1 = Normal operation
	spi_slaveDeSelect(0); // Deselect display chip
  9e:	18 16       	cp	r1, r24
  a0:	19 06       	cpc	r1, r25
  a2:	6c f4       	brge	.+26     	; 0xbe <wait+0x20>
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	ef ec       	ldi	r30, 0xCF	; 207
  aa:	f7 e0       	ldi	r31, 0x07	; 7
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <wait+0xe>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <wait+0x14>
  b2:	00 00       	nop
  b4:	2f 5f       	subi	r18, 0xFF	; 255
  b6:	3f 4f       	sbci	r19, 0xFF	; 255
  b8:	82 17       	cp	r24, r18
  ba:	93 07       	cpc	r25, r19
  bc:	a9 f7       	brne	.-22     	; 0xa8 <wait+0xa>
  be:	08 95       	ret

000000c0 <spi_masterInit>:
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	87 bb       	out	0x17, r24	; 23
  c4:	bb 98       	cbi	0x17, 3	; 23
  c6:	c0 9a       	sbi	0x18, 0	; 24
  c8:	82 e5       	ldi	r24, 0x52	; 82
  ca:	8d b9       	out	0x0d, r24	; 13
  cc:	08 95       	ret

000000ce <spi_write>:
  ce:	8f b9       	out	0x0f, r24	; 15
  d0:	77 9b       	sbis	0x0e, 7	; 14
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <spi_write+0x2>
  d4:	08 95       	ret

000000d6 <spi_slaveSelect>:
  d6:	98 b3       	in	r25, 0x18	; 24
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <spi_slaveSelect+0xc>
  de:	22 0f       	add	r18, r18
  e0:	33 1f       	adc	r19, r19
  e2:	8a 95       	dec	r24
  e4:	e2 f7       	brpl	.-8      	; 0xde <spi_slaveSelect+0x8>
  e6:	20 95       	com	r18
  e8:	29 23       	and	r18, r25
  ea:	28 bb       	out	0x18, r18	; 24
  ec:	08 95       	ret

000000ee <spi_slaveDeSelect>:
  ee:	98 b3       	in	r25, 0x18	; 24
  f0:	21 e0       	ldi	r18, 0x01	; 1
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <spi_slaveDeSelect+0xc>
  f6:	22 0f       	add	r18, r18
  f8:	33 1f       	adc	r19, r19
  fa:	8a 95       	dec	r24
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <spi_slaveDeSelect+0x8>
  fe:	29 2b       	or	r18, r25
 100:	28 bb       	out	0x18, r18	; 24
 102:	08 95       	ret

00000104 <spi_writeLetter>:
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	d8 2f       	mov	r29, r24
 10a:	c6 2f       	mov	r28, r22
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	e2 df       	rcall	.-60     	; 0xd6 <spi_slaveSelect>
 112:	8d 2f       	mov	r24, r29
 114:	dc df       	rcall	.-72     	; 0xce <spi_write>
 116:	8c 2f       	mov	r24, r28
 118:	da df       	rcall	.-76     	; 0xce <spi_write>
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	e7 df       	rcall	.-50     	; 0xee <spi_slaveDeSelect>
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	08 95       	ret

00000126 <displayDriverInit>:
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	d6 df       	rcall	.-84     	; 0xd6 <spi_slaveSelect>
 12a:	89 e0       	ldi	r24, 0x09	; 9
 12c:	d0 df       	rcall	.-96     	; 0xce <spi_write>
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	ce df       	rcall	.-100    	; 0xce <spi_write>
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	dc df       	rcall	.-72     	; 0xee <spi_slaveDeSelect>
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	ce df       	rcall	.-100    	; 0xd6 <spi_slaveSelect>
 13a:	8a e0       	ldi	r24, 0x0A	; 10
 13c:	c8 df       	rcall	.-112    	; 0xce <spi_write>
 13e:	8f e0       	ldi	r24, 0x0F	; 15
 140:	c6 df       	rcall	.-116    	; 0xce <spi_write>
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	d4 df       	rcall	.-88     	; 0xee <spi_slaveDeSelect>
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	c6 df       	rcall	.-116    	; 0xd6 <spi_slaveSelect>
 14a:	8b e0       	ldi	r24, 0x0B	; 11
 14c:	c0 df       	rcall	.-128    	; 0xce <spi_write>
 14e:	83 e0       	ldi	r24, 0x03	; 3
 150:	be df       	rcall	.-132    	; 0xce <spi_write>
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	cc df       	rcall	.-104    	; 0xee <spi_slaveDeSelect>
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	be df       	rcall	.-132    	; 0xd6 <spi_slaveSelect>
 15a:	8c e0       	ldi	r24, 0x0C	; 12
 15c:	b8 df       	rcall	.-144    	; 0xce <spi_write>
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	b6 df       	rcall	.-148    	; 0xce <spi_write>
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	c4 cf       	rjmp	.-120    	; 0xee <spi_slaveDeSelect>
 166:	08 95       	ret

00000168 <writeLedDisplay>:
}

void writeLedDisplay(int value)
{
 168:	cf 92       	push	r12
 16a:	df 92       	push	r13
 16c:	ff 92       	push	r15
 16e:	0f 93       	push	r16
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	ec 01       	movw	r28, r24
	int i = 4;
	int neg = value < 0;
	if (neg){
 178:	99 23       	and	r25, r25
 17a:	44 f4       	brge	.+16     	; 0x18c <writeLedDisplay+0x24>
		value *= -1;
 17c:	d1 95       	neg	r29
 17e:	c1 95       	neg	r28
 180:	d1 09       	sbc	r29, r1
		spi_writeLetter(i, 10);
 182:	6a e0       	ldi	r22, 0x0A	; 10
 184:	84 e0       	ldi	r24, 0x04	; 4
 186:	be df       	rcall	.-132    	; 0x104 <spi_writeLetter>
		i--;
 188:	13 e0       	ldi	r17, 0x03	; 3
 18a:	01 c0       	rjmp	.+2      	; 0x18e <writeLedDisplay+0x26>
	spi_slaveDeSelect(0); // Deselect display chip
}

void writeLedDisplay(int value)
{
	int i = 4;
 18c:	14 e0       	ldi	r17, 0x04	; 4
	if (neg){
		value *= -1;
		spi_writeLetter(i, 10);
		i--;
	}
	while (value > 0)
 18e:	1c 16       	cp	r1, r28
 190:	1d 06       	cpc	r1, r29
 192:	9c f4       	brge	.+38     	; 0x1ba <writeLedDisplay+0x52>
	{
		spi_writeLetter(i, value % 10);
 194:	0f 2e       	mov	r0, r31
 196:	fa e0       	ldi	r31, 0x0A	; 10
 198:	cf 2e       	mov	r12, r31
 19a:	d1 2c       	mov	r13, r1
 19c:	f0 2d       	mov	r31, r0
 19e:	ce 01       	movw	r24, r28
 1a0:	b6 01       	movw	r22, r12
 1a2:	58 d0       	rcall	.+176    	; 0x254 <__divmodhi4>
 1a4:	f6 2e       	mov	r15, r22
 1a6:	07 2f       	mov	r16, r23
 1a8:	68 2f       	mov	r22, r24
 1aa:	81 2f       	mov	r24, r17
 1ac:	ab df       	rcall	.-170    	; 0x104 <spi_writeLetter>
		value /= 10;
 1ae:	cf 2d       	mov	r28, r15
 1b0:	d0 2f       	mov	r29, r16
 1b2:	11 50       	subi	r17, 0x01	; 1
	if (neg){
		value *= -1;
		spi_writeLetter(i, 10);
		i--;
	}
	while (value > 0)
 1b4:	1c 16       	cp	r1, r28
 1b6:	1d 06       	cpc	r1, r29
 1b8:	94 f3       	brlt	.-28     	; 0x19e <writeLedDisplay+0x36>
	{
		spi_writeLetter(i, value % 10);
		value /= 10;
		i--;
	}
}
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	1f 91       	pop	r17
 1c0:	0f 91       	pop	r16
 1c2:	ff 90       	pop	r15
 1c4:	df 90       	pop	r13
 1c6:	cf 90       	pop	r12
 1c8:	08 95       	ret

000001ca <main>:

int main()
{
 1ca:	cf 93       	push	r28
	DDRB=0x01; // Set PB0 pin as output for display select
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	87 bb       	out	0x17, r24	; 23
	spi_masterInit(); // Initialize spi module
 1d0:	77 df       	rcall	.-274    	; 0xc0 <spi_masterInit>
	displayDriverInit(); // Initialize display chip
 1d2:	a9 df       	rcall	.-174    	; 0x126 <displayDriverInit>
 1d4:	c1 e0       	ldi	r28, 0x01	; 1
	
	// clear display (all zero's)
	for (char i =1; i<=4; i++)
	{
		spi_slaveSelect(0); // Select display chip
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	7e df       	rcall	.-260    	; 0xd6 <spi_slaveSelect>
		spi_write(i); // digit adress: (digit place)
 1da:	8c 2f       	mov	r24, r28
 1dc:	78 df       	rcall	.-272    	; 0xce <spi_write>
		spi_write(0); // digit value: 0
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	76 df       	rcall	.-276    	; 0xce <spi_write>
 1e2:	80 e0       	ldi	r24, 0x00	; 0
		spi_slaveDeSelect(0); // Deselect display chip
 1e4:	84 df       	rcall	.-248    	; 0xee <spi_slaveDeSelect>
 1e6:	cf 5f       	subi	r28, 0xFF	; 255
	DDRB=0x01; // Set PB0 pin as output for display select
	spi_masterInit(); // Initialize spi module
	displayDriverInit(); // Initialize display chip
	
	// clear display (all zero's)
	for (char i =1; i<=4; i++)
 1e8:	c5 30       	cpi	r28, 0x05	; 5
 1ea:	a9 f7       	brne	.-22     	; 0x1d6 <main+0xc>
		spi_slaveSelect(0); // Select display chip
		spi_write(i); // digit adress: (digit place)
		spi_write(0); // digit value: 0
		spi_slaveDeSelect(0); // Deselect display chip
	}
	wait(1000);
 1ec:	88 ee       	ldi	r24, 0xE8	; 232
 1ee:	93 e0       	ldi	r25, 0x03	; 3
 1f0:	56 df       	rcall	.-340    	; 0x9e <wait>
	
	// write 4-digit data
	for (char i =1; i<=4; i++)
 1f2:	c1 e0       	ldi	r28, 0x01	; 1
	{
		spi_slaveSelect(0); // Select display chip
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	6f df       	rcall	.-290    	; 0xd6 <spi_slaveSelect>
		spi_write(i); // digit adress: (digit place)
 1f8:	8c 2f       	mov	r24, r28
 1fa:	69 df       	rcall	.-302    	; 0xce <spi_write>
		spi_write(i); // digit value: i (= digit place)
 1fc:	8c 2f       	mov	r24, r28
 1fe:	67 df       	rcall	.-306    	; 0xce <spi_write>
 200:	80 e0       	ldi	r24, 0x00	; 0
		spi_slaveDeSelect(0); // Deselect display chip
 202:	75 df       	rcall	.-278    	; 0xee <spi_slaveDeSelect>
 204:	88 ee       	ldi	r24, 0xE8	; 232
		wait(1000);
 206:	93 e0       	ldi	r25, 0x03	; 3
 208:	4a df       	rcall	.-364    	; 0x9e <wait>
 20a:	cf 5f       	subi	r28, 0xFF	; 255
		spi_slaveDeSelect(0); // Deselect display chip
	}
	wait(1000);
	
	// write 4-digit data
	for (char i =1; i<=4; i++)
 20c:	c5 30       	cpi	r28, 0x05	; 5
 20e:	91 f7       	brne	.-28     	; 0x1f4 <main+0x2a>
		spi_slaveDeSelect(0); // Deselect display chip
		wait(1000);
	}
	
	
	wait(1000);
 210:	88 ee       	ldi	r24, 0xE8	; 232
 212:	93 e0       	ldi	r25, 0x03	; 3
 214:	44 df       	rcall	.-376    	; 0x9e <wait>
	writeLedDisplay(8991);
 216:	8f e1       	ldi	r24, 0x1F	; 31
 218:	93 e2       	ldi	r25, 0x23	; 35
 21a:	a6 df       	rcall	.-180    	; 0x168 <writeLedDisplay>
	wait(1000);
 21c:	88 ee       	ldi	r24, 0xE8	; 232
 21e:	93 e0       	ldi	r25, 0x03	; 3
 220:	3e df       	rcall	.-388    	; 0x9e <wait>
	writeLedDisplay(-123);
 222:	85 e8       	ldi	r24, 0x85	; 133
 224:	9f ef       	ldi	r25, 0xFF	; 255
 226:	a0 df       	rcall	.-192    	; 0x168 <writeLedDisplay>
	
	wait(1000);
 228:	88 ee       	ldi	r24, 0xE8	; 232
 22a:	93 e0       	ldi	r25, 0x03	; 3
 22c:	38 df       	rcall	.-400    	; 0x9e <wait>

	spi_writeLetter(1, 0x5e);
 22e:	6e e5       	ldi	r22, 0x5E	; 94
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	68 df       	rcall	.-304    	; 0x104 <spi_writeLetter>
 234:	60 e0       	ldi	r22, 0x00	; 0
	spi_writeLetter(2, 0x00);
 236:	82 e0       	ldi	r24, 0x02	; 2
 238:	65 df       	rcall	.-310    	; 0x104 <spi_writeLetter>
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	83 e0       	ldi	r24, 0x03	; 3
	spi_writeLetter(3, 0x00);
 23e:	62 df       	rcall	.-316    	; 0x104 <spi_writeLetter>
 240:	6e e5       	ldi	r22, 0x5E	; 94
 242:	84 e0       	ldi	r24, 0x04	; 4
 244:	5f df       	rcall	.-322    	; 0x104 <spi_writeLetter>
	spi_writeLetter(4, 0x5e);
 246:	88 ee       	ldi	r24, 0xE8	; 232
 248:	93 e0       	ldi	r25, 0x03	; 3
 24a:	29 df       	rcall	.-430    	; 0x9e <wait>
 24c:	81 e0       	ldi	r24, 0x01	; 1
	
	wait(1000);
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <__divmodhi4>:
 254:	97 fb       	bst	r25, 7

	return (1);
}
 256:	07 2e       	mov	r0, r23
 258:	16 f4       	brtc	.+4      	; 0x25e <__divmodhi4+0xa>
 25a:	00 94       	com	r0
 25c:	06 d0       	rcall	.+12     	; 0x26a <__divmodhi4_neg1>
 25e:	77 fd       	sbrc	r23, 7
 260:	08 d0       	rcall	.+16     	; 0x272 <__divmodhi4_neg2>
 262:	0b d0       	rcall	.+22     	; 0x27a <__udivmodhi4>
 264:	07 fc       	sbrc	r0, 7
 266:	05 d0       	rcall	.+10     	; 0x272 <__divmodhi4_neg2>
 268:	3e f4       	brtc	.+14     	; 0x278 <__divmodhi4_exit>

0000026a <__divmodhi4_neg1>:
 26a:	90 95       	com	r25
 26c:	81 95       	neg	r24
 26e:	9f 4f       	sbci	r25, 0xFF	; 255
 270:	08 95       	ret

00000272 <__divmodhi4_neg2>:
 272:	70 95       	com	r23
 274:	61 95       	neg	r22
 276:	7f 4f       	sbci	r23, 0xFF	; 255

00000278 <__divmodhi4_exit>:
 278:	08 95       	ret

0000027a <__udivmodhi4>:
 27a:	aa 1b       	sub	r26, r26
 27c:	bb 1b       	sub	r27, r27
 27e:	51 e1       	ldi	r21, 0x11	; 17
 280:	07 c0       	rjmp	.+14     	; 0x290 <__udivmodhi4_ep>

00000282 <__udivmodhi4_loop>:
 282:	aa 1f       	adc	r26, r26
 284:	bb 1f       	adc	r27, r27
 286:	a6 17       	cp	r26, r22
 288:	b7 07       	cpc	r27, r23
 28a:	10 f0       	brcs	.+4      	; 0x290 <__udivmodhi4_ep>
 28c:	a6 1b       	sub	r26, r22
 28e:	b7 0b       	sbc	r27, r23

00000290 <__udivmodhi4_ep>:
 290:	88 1f       	adc	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	5a 95       	dec	r21
 296:	a9 f7       	brne	.-22     	; 0x282 <__udivmodhi4_loop>
 298:	80 95       	com	r24
 29a:	90 95       	com	r25
 29c:	bc 01       	movw	r22, r24
 29e:	cd 01       	movw	r24, r26
 2a0:	08 95       	ret

000002a2 <_exit>:
 2a2:	f8 94       	cli

000002a4 <__stop_program>:
 2a4:	ff cf       	rjmp	.-2      	; 0x2a4 <__stop_program>
